// Shader created with Shader Forge v1.38 
// Shader Forge (c) Neat Corporation / Joachim Holmer - http://www.acegikmo.com/shaderforge/
// Note: Manually altering this data may prevent you from opening it in Shader Forge
/*SF_DATA;ver:1.38;sub:START;pass:START;ps:flbk:,iptp:0,cusa:False,bamd:0,cgin:,lico:0,lgpr:1,limd:0,spmd:1,trmd:0,grmd:0,uamb:True,mssp:True,bkdf:False,hqlp:False,rprd:False,enco:False,rmgx:True,imps:True,rpth:0,vtps:0,hqsc:True,nrmq:1,nrsp:0,vomd:0,spxs:False,tesm:0,olmd:1,culm:2,bsrc:0,bdst:1,dpts:6,wrdp:False,dith:0,atcv:False,rfrpo:False,rfrpn:Refraction,coma:15,ufog:False,aust:False,igpj:False,qofs:0,qpre:3,rntp:0,fgom:False,fgoc:False,fgod:False,fgor:False,fgmd:0,fgcr:0.5661765,fgcg:1,fgcb:0.6589251,fgca:1,fgde:0.0015,fgrn:0,fgrf:300,stcl:False,atwp:False,stva:128,stmr:255,stmw:255,stcp:4,stps:0,stfa:0,stfz:0,ofsf:0,ofsu:0,f2p0:False,fnsp:True,fnfb:True,fsmp:True;n:type:ShaderForge.SFN_Final,id:4614,x:33208,y:33005,varname:node_4614,prsc:2|emission-4168-OUT,custl-1269-OUT;n:type:ShaderForge.SFN_ScreenPos,id:1116,x:26519,y:32079,varname:node_1116,prsc:2,sctp:2;n:type:ShaderForge.SFN_ScreenParameters,id:8686,x:27599,y:32376,cmnt:Gets the screen size in pixels,varname:node_8686,prsc:2;n:type:ShaderForge.SFN_Append,id:7562,x:27813,y:32376,varname:node_7562,prsc:2|A-8686-PXW,B-8686-PXH;n:type:ShaderForge.SFN_ComponentMask,id:7967,x:28895,y:32553,varname:node_7967,prsc:2,cc1:0,cc2:1,cc3:-1,cc4:-1|IN-9346-OUT;n:type:ShaderForge.SFN_Lerp,id:7608,x:32225,y:33312,cmnt:Smoothens between the tree pixel and the background pixel along UV Y,varname:node_7608,prsc:2|A-5497-RGB,B-1314-RGB,T-6487-OUT;n:type:ShaderForge.SFN_Tex2d,id:2587,x:27769,y:33095,cmnt:Left pixel. Modified alpha.,varname:LeftPix,prsc:2,ntxv:0,isnm:False|UVIN-2624-OUT,TEX-6824-TEX;n:type:ShaderForge.SFN_Lerp,id:1661,x:32232,y:32868,cmnt:Smoothens between the tree pixel and the background pixel along UV X.,varname:node_1661,prsc:2|A-6210-RGB,B-1678-RGB,T-3426-OUT;n:type:ShaderForge.SFN_Set,id:3669,x:28369,y:33192,varname:ThisPixColor,prsc:2|IN-2470-RGB;n:type:ShaderForge.SFN_Set,id:5476,x:31706,y:32584,varname:TreeAlphaX,prsc:2|IN-583-OUT;n:type:ShaderForge.SFN_Tex2d,id:2470,x:28136,y:33105,cmnt:Subject pixel. Modified alpha.,varname:ThisPix,prsc:2,ntxv:0,isnm:False|UVIN-1991-OUT,TEX-6824-TEX;n:type:ShaderForge.SFN_Get,id:5589,x:32820,y:33552,varname:node_5589,prsc:2|IN-3669-OUT;n:type:ShaderForge.SFN_Get,id:8937,x:32820,y:33501,cmnt:Connect any of these to Custom Lighting to see debug information. Must also connect the Dummy Node above.,varname:node_8937,prsc:2|IN-5476-OUT;n:type:ShaderForge.SFN_Tex2d,id:326,x:28136,y:32862,cmnt:Top pixel. Modified alpha.,varname:TopPix,prsc:2,ntxv:0,isnm:False|UVIN-1894-OUT,TEX-6824-TEX;n:type:ShaderForge.SFN_Subtract,id:3138,x:26014,y:32348,cmnt:This will subtract 1 pixel from UV.y,varname:node_3138,prsc:2|A-873-OUT,B-8314-OUT;n:type:ShaderForge.SFN_Append,id:72,x:26342,y:32432,varname:node_72,prsc:2|A-5162-OUT,B-3138-OUT;n:type:ShaderForge.SFN_Divide,id:1894,x:26720,y:32429,cmnt:Remaps pixel distance back to ScreenUV with range from 0 to 1.,varname:node_1894,prsc:2|A-72-OUT,B-5212-OUT;n:type:ShaderForge.SFN_Vector1,id:8314,x:25833,y:32364,varname:node_8314,prsc:2,v1:10000;n:type:ShaderForge.SFN_Multiply,id:3231,x:28247,y:32501,cmnt:ScreenUV is converted to Screen Pixels X and Y location,varname:node_3231,prsc:2|A-1991-OUT,B-9556-OUT;n:type:ShaderForge.SFN_Tex2dAsset,id:6824,x:27324,y:32978,ptovrint:False,ptlb:MainTex,ptin:_MainTex,cmnt:This is an texture where all non tree pixels are set to fully opaque.,varname:_MainTex,glob:False,taghide:False,taghdr:False,tagprd:False,tagnsco:False,tagnrm:False,ntxv:0,isnm:False;n:type:ShaderForge.SFN_Tex2dAsset,id:1381,x:27322,y:33568,ptovrint:False,ptlb:_LushLODOriginalPixels3,ptin:_LushLODOriginalPixels3,cmnt:This is the original colors. And original alpha.,varname:node_1381,glob:True,taghide:False,taghdr:False,tagprd:False,tagnsco:False,tagnrm:False,ntxv:0,isnm:False;n:type:ShaderForge.SFN_Get,id:8484,x:32553,y:32998,varname:node_8484,prsc:2|IN-3669-OUT;n:type:ShaderForge.SFN_Get,id:6472,x:32553,y:32943,varname:node_6472,prsc:2|IN-6748-OUT;n:type:ShaderForge.SFN_Set,id:8807,x:27969,y:33762,cmnt:Used to undo the changes we made in the alpha channel of the screen.,varname:OriginalAlpha,prsc:2|IN-474-A;n:type:ShaderForge.SFN_Get,id:1040,x:32820,y:33701,cmnt:Connect this to Opacity if you need the original alpha values of every pixel to be restored. Costs an additional sampler.,varname:node_1040,prsc:2|IN-8807-OUT;n:type:ShaderForge.SFN_Divide,id:2624,x:26655,y:33167,cmnt:Remaps pixel distance back to ScreenUV with range from 0 to 1.,varname:node_2624,prsc:2|A-2737-OUT,B-3788-OUT;n:type:ShaderForge.SFN_Append,id:2737,x:26355,y:33155,varname:node_2737,prsc:2|A-1113-OUT,B-4085-OUT;n:type:ShaderForge.SFN_Subtract,id:1113,x:26033,y:33102,cmnt:This will subtract 1 pixel from UV.x,varname:node_1113,prsc:2|A-4439-OUT,B-2870-OUT;n:type:ShaderForge.SFN_Set,id:2026,x:29083,y:32561,varname:PixelLoc_X,prsc:2|IN-7967-R;n:type:ShaderForge.SFN_Set,id:608,x:29083,y:32611,varname:PixelLoc_Y,prsc:2|IN-7967-G;n:type:ShaderForge.SFN_Get,id:873,x:25812,y:32293,varname:node_873,prsc:2|IN-608-OUT;n:type:ShaderForge.SFN_Get,id:5162,x:26146,y:32432,varname:node_5162,prsc:2|IN-2026-OUT;n:type:ShaderForge.SFN_Set,id:3348,x:28498,y:32328,varname:ScreenSizePix,prsc:2|IN-9556-OUT;n:type:ShaderForge.SFN_Get,id:5212,x:26535,y:32483,varname:node_5212,prsc:2|IN-3348-OUT;n:type:ShaderForge.SFN_Get,id:3788,x:26422,y:33297,varname:node_3788,prsc:2|IN-3348-OUT;n:type:ShaderForge.SFN_Get,id:4085,x:26160,y:33174,varname:node_4085,prsc:2|IN-608-OUT;n:type:ShaderForge.SFN_Get,id:4439,x:25823,y:33069,varname:node_4439,prsc:2|IN-2026-OUT;n:type:ShaderForge.SFN_Vector1,id:2870,x:25823,y:33136,varname:node_2870,prsc:2,v1:10000;n:type:ShaderForge.SFN_Color,id:1678,x:31412,y:33116,ptovrint:False,ptlb:_TreeColorX,ptin:_TreeColorX,cmnt:Tree pixel color along UV X,varname:_node_1678,prsc:2,glob:True,taghide:False,taghdr:False,tagprd:False,tagnsco:False,tagnrm:False,c1:0.5,c2:0.5,c3:0.5,c4:1;n:type:ShaderForge.SFN_Color,id:6210,x:31412,y:32921,ptovrint:False,ptlb:_BackColorX,ptin:_BackColorX,cmnt:NON Tree color along UV X,varname:_TreeColorX_copy,prsc:2,glob:True,taghide:False,taghdr:False,tagprd:False,tagnsco:False,tagnrm:False,c1:0.5,c2:0.5,c3:0.5,c4:1;n:type:ShaderForge.SFN_Color,id:1314,x:31412,y:33313,ptovrint:False,ptlb:_TreeColorY,ptin:_TreeColorY,cmnt:Tree pixel color along UV Y,varname:__BackColorX_copy,prsc:2,glob:True,taghide:False,taghdr:False,tagprd:False,tagnsco:False,tagnrm:False,c1:0.5,c2:0.5,c3:0.5,c4:1;n:type:ShaderForge.SFN_Color,id:5497,x:31412,y:32729,ptovrint:False,ptlb:_BackColorY,ptin:_BackColorY,cmnt:NON Tree color along UV Y,varname:_TreeColorY_copy,prsc:2,glob:True,taghide:False,taghdr:False,tagprd:False,tagnsco:False,tagnrm:False,c1:0.5,c2:0.5,c3:0.5,c4:1;n:type:ShaderForge.SFN_ComponentMask,id:4727,x:30942,y:32854,varname:node_4727,prsc:2,cc1:0,cc2:1,cc3:-1,cc4:-1|IN-9884-OUT;n:type:ShaderForge.SFN_Set,id:1596,x:31534,y:33553,varname:TreeAlphaY,prsc:2|IN-1030-OUT;n:type:ShaderForge.SFN_Get,id:6487,x:31939,y:33391,varname:node_6487,prsc:2|IN-1596-OUT;n:type:ShaderForge.SFN_Get,id:3426,x:31937,y:32789,varname:node_3426,prsc:2|IN-5476-OUT;n:type:ShaderForge.SFN_Min,id:1299,x:30942,y:33024,varname:node_1299,prsc:2|A-4727-R,B-4727-G;n:type:ShaderForge.SFN_Set,id:6748,x:31156,y:33024,varname:LowestAlpha,prsc:2|IN-1299-OUT;n:type:ShaderForge.SFN_Set,id:4434,x:28369,y:33239,varname:ThisPixAlpha,prsc:2|IN-2470-A;n:type:ShaderForge.SFN_Get,id:9262,x:32820,y:33607,varname:node_9262,prsc:2|IN-4434-OUT;n:type:ShaderForge.SFN_ValueProperty,id:9902,x:32280,y:33061,ptovrint:False,ptlb:_XorY,ptin:_XorY,varname:node_9902,prsc:2,glob:True,taghide:False,taghdr:False,tagprd:False,tagnsco:False,tagnrm:False,v1:1;n:type:ShaderForge.SFN_Lerp,id:9617,x:32574,y:33072,varname:node_9617,prsc:2|A-1661-OUT,B-7608-OUT,T-9902-OUT;n:type:ShaderForge.SFN_Code,id:9884,x:29562,y:32748,varname:node_9884,prsc:2,code:,output:1,fname:Alpha_Pattern_Test,width:1182,height:1230,input:2,input:2,input:2,input:0,input:0,input:0,input:0,input:2,input:1,input:0,input:0,input:0,input:2,input:2,input_1_label:ThisColor,input_2_label:TopColor,input_3_label:LeftColor,input_4_label:ThisAlpha,input_5_label:TopAlpha,input_6_label:LeftAlpha,input_7_label:BotAlpha,input_8_label:BotColor,input_9_label:px,input_10_label:DisableHQ,input_11_label:BotLeftAlpha,input_12_label:TopLeftAlpha,input_13_label:BotLeftColor,input_14_label:TopLeftColor|A-2470-RGB,B-326-RGB,C-2587-RGB,D-2470-A,E-326-A,F-2587-A,G-7515-A,H-7515-RGB,I-265-OUT,J-4270-OUT,K-4615-A,L-1604-A,M-4615-RGB,N-1604-RGB;n:type:ShaderForge.SFN_Tex2d,id:7515,x:28125,y:33327,cmnt:Bottom pixel. Modified alpha.,varname:BottomPix,prsc:2,ntxv:0,isnm:False|UVIN-6567-OUT,TEX-6824-TEX;n:type:ShaderForge.SFN_Append,id:3113,x:26305,y:32804,varname:node_3113,prsc:2|A-8968-OUT,B-2486-OUT;n:type:ShaderForge.SFN_Divide,id:6567,x:26683,y:32801,cmnt:Remaps pixel distance back to ScreenUV with range from 0 to 1.,varname:node_6567,prsc:2|A-3113-OUT,B-8659-OUT;n:type:ShaderForge.SFN_Vector1,id:340,x:25753,y:32818,varname:node_340,prsc:2,v1:10000;n:type:ShaderForge.SFN_Get,id:9250,x:25732,y:32771,varname:node_9250,prsc:2|IN-608-OUT;n:type:ShaderForge.SFN_Get,id:8968,x:26105,y:32855,varname:node_8968,prsc:2|IN-2026-OUT;n:type:ShaderForge.SFN_Get,id:8659,x:26498,y:32855,varname:node_8659,prsc:2|IN-3348-OUT;n:type:ShaderForge.SFN_Min,id:4168,x:33000,y:32649,cmnt:Dummy node. Connect this to Emission if you are debugging to get rid of pink shader errors.,varname:node_4168,prsc:2|A-4930-OUT,B-1269-OUT;n:type:ShaderForge.SFN_Vector3,id:4930,x:32768,y:32660,varname:node_4930,prsc:2,v1:0,v2:0,v3:0;n:type:ShaderForge.SFN_ValueProperty,id:3031,x:27926,y:31918,ptovrint:False,ptlb:LushLODTreeDisableHQ,ptin:_LushLODTreeDisableHQ,cmnt:This is set to 0 if we are on BillboardsOnly mode otherwise it is 1.,varname:node_3031,prsc:2,glob:True,taghide:False,taghdr:False,tagprd:False,tagnsco:False,tagnrm:False,v1:1;n:type:ShaderForge.SFN_Round,id:9346,x:28588,y:32535,varname:node_9346,prsc:2|IN-3231-OUT;n:type:ShaderForge.SFN_Multiply,id:9556,x:28277,y:32328,cmnt:Multiply the screen pixels by 10000 to make our math 10k times more precise. This hopefully fixes issues with the rounding that was causing pixels to be skipped which caused lines through the trees.,varname:node_9556,prsc:2|A-7562-OUT,B-2136-OUT;n:type:ShaderForge.SFN_Vector1,id:2136,x:28068,y:32269,varname:node_2136,prsc:2,v1:10000;n:type:ShaderForge.SFN_Multiply,id:1761,x:28293,y:32675,varname:node_1761,prsc:2|A-1991-OUT,B-7562-OUT;n:type:ShaderForge.SFN_Floor,id:265,x:28504,y:32695,varname:node_265,prsc:2|IN-1761-OUT;n:type:ShaderForge.SFN_Tex2d,id:4615,x:27779,y:33367,cmnt:BotLeft pixel. Modified alpha.,varname:BotLeftPix,prsc:2,ntxv:0,isnm:False|UVIN-528-OUT,TEX-6824-TEX;n:type:ShaderForge.SFN_Add,id:2486,x:25967,y:32801,cmnt:This will add 1 pixel to UV.y,varname:node_2486,prsc:2|A-9250-OUT,B-340-OUT;n:type:ShaderForge.SFN_Tex2d,id:1604,x:27753,y:32854,cmnt:TopLeft pixel. Modified alpha.,varname:TopLeftPix,prsc:2,ntxv:0,isnm:False|UVIN-3304-OUT,TEX-6824-TEX;n:type:ShaderForge.SFN_ComponentMask,id:5642,x:26912,y:32485,varname:node_5642,prsc:2,cc1:1,cc2:-1,cc3:-1,cc4:-1|IN-1894-OUT;n:type:ShaderForge.SFN_ComponentMask,id:4578,x:26836,y:33227,varname:node_4578,prsc:2,cc1:0,cc2:-1,cc3:-1,cc4:-1|IN-2624-OUT;n:type:ShaderForge.SFN_Append,id:3304,x:27151,y:32588,varname:node_3304,prsc:2|A-4578-OUT,B-5642-OUT;n:type:ShaderForge.SFN_ComponentMask,id:4091,x:26849,y:32849,varname:node_4091,prsc:2,cc1:1,cc2:-1,cc3:-1,cc4:-1|IN-6567-OUT;n:type:ShaderForge.SFN_Append,id:528,x:27107,y:33301,varname:node_528,prsc:2|A-4578-OUT,B-4091-OUT;n:type:ShaderForge.SFN_Tex2d,id:474,x:27756,y:33685,cmnt:Subject pixel. Original alpha.,varname:OriginalPix,prsc:2,ntxv:0,isnm:False|UVIN-1991-OUT,TEX-1381-TEX;n:type:ShaderForge.SFN_Code,id:1269,x:32753,y:32977,cmnt:Draw original color if all three pixels are opaque. Non tree pixels are fully opaque.,varname:node_1269,prsc:2,code:cgBlAHQAdQByAG4AIABBACAAPAAgADAALgA5ADkAMQAgAD8AIABYAFkAIAA6ACAAQwA7AA==,output:2,fname:If_Node,width:247,height:112,input:0,input:2,input:2,input_1_label:A,input_2_label:C,input_3_label:XY|A-6472-OUT,B-8484-OUT,C-9617-OUT;n:type:ShaderForge.SFN_RemapRange,id:547,x:31120,y:32587,varname:node_547,prsc:2,frmn:0.01,frmx:0.95,tomn:0,tomx:1|IN-4727-R;n:type:ShaderForge.SFN_RemapRange,id:5263,x:31041,y:33454,varname:node_5263,prsc:2,frmn:0.01,frmx:0.95,tomn:0,tomx:1|IN-4727-G;n:type:ShaderForge.SFN_Clamp01,id:583,x:31339,y:32534,cmnt:This is needed because the FAR trees actually range from 0 to 0.95 not 0.01 to 0.95,varname:node_583,prsc:2|IN-547-OUT;n:type:ShaderForge.SFN_Clamp01,id:1030,x:31291,y:33517,cmnt:This is needed because the FAR trees actually range from 0 to 0.95 not 0.01 to 0.95,varname:node_1030,prsc:2|IN-5263-OUT;n:type:ShaderForge.SFN_Tex2dAsset,id:1101,x:27324,y:32792,ptovrint:False,ptlb:LushLODStencilPixels,ptin:_LushLODStencilPixels,cmnt:This is the original colors. And original alpha.,varname:_LushLODOriginalPixels_copy,glob:True,taghide:False,taghdr:False,tagprd:False,tagnsco:False,tagnrm:False,ntxv:0,isnm:False;n:type:ShaderForge.SFN_Vector1,id:7646,x:29326,y:32543,varname:node_7646,prsc:2,v1:1;n:type:ShaderForge.SFN_Code,id:2902,x:32775,y:33174,varname:node_2902,prsc:2,code:cgBlAHQAdQByAG4AIABBACAAPQA9ACAAMQAgAD8AIAAwACAAOgAgADEAOwA=,output:0,fname:Function_node_2902,width:247,height:132,input:0,input_1_label:A|A-9262-OUT;n:type:ShaderForge.SFN_Vector3,id:4088,x:32944,y:33339,varname:node_4088,prsc:2,v1:1,v2:0,v3:0;n:type:ShaderForge.SFN_Fmod,id:7613,x:27926,y:32159,varname:node_7613,prsc:2|A-8686-PXH,B-2827-OUT;n:type:ShaderForge.SFN_Vector1,id:2827,x:27709,y:32201,varname:node_2827,prsc:2,v1:2;n:type:ShaderForge.SFN_Lerp,id:4270,x:28357,y:32023,cmnt:If the screen height in pixels is an odd number reverse the checkerdbox pattern,varname:node_4270,prsc:2|A-1631-OUT,B-3031-OUT,T-7613-OUT;n:type:ShaderForge.SFN_OneMinus,id:1631,x:27926,y:32007,varname:node_1631,prsc:2|IN-3031-OUT;n:type:ShaderForge.SFN_Code,id:1991,x:26773,y:32085,varname:node_1991,prsc:2,code:IwBpAGYAIABVAE4ASQBUAFkAXwBVAFYAXwBTAFQAQQBSAFQAUwBfAEEAVABfAFQATwBQAA0ACgByAGUAdAB1AHIAbgAgAGYAbABvAGEAdAAyACgAcwBjAHIAZQBlAG4AUABvAHMALgB4ACwAIAAxAC0AcwBjAHIAZQBlAG4AUABvAHMALgB5ACkAOwAKACMAZQBsAHMAZQANAAoAcgBlAHQAdQByAG4AIABmAGwAbwBhAHQAMgAoAHMAYwByAGUAZQBuAFAAbwBzAC4AeAAsACAAcwBjAHIAZQBlAG4AUABvAHMALgB5ACkAOwAKACMAZQBuAGQAaQBmAA==,output:1,fname:GimmeScreenSpaceUV_MAINPASS,width:445,height:148,input:1,input_1_label:screenPos|A-1116-UVOUT;proporder:6824;pass:END;sub:END;*/

Shader "Hidden/LushLODTree/SmoothTheDithering" {
    Properties {
        _MainTex ("MainTex", 2D) = "white" {}
    }
    SubShader {
        Tags {
            "Queue"="Transparent"
        }
        Pass {
            Name "FORWARD"
            Tags {
                "LightMode"="ForwardBase"
            }
            Cull Off
            ZTest Always
            ZWrite Off
            
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
			#ifndef UNITY_PASS_FORWARDBASE //<-- fixes really weird bug.
			#define UNITY_PASS_FORWARDBASE
			#endif
            #include "UnityCG.cginc"
            #pragma multi_compile_fwdbase_fullshadows
            #pragma target 3.0
            uniform sampler2D _MainTex; uniform float4 _MainTex_ST;
            uniform float4 _TreeColorX;
            uniform float4 _BackColorX;
            uniform float4 _TreeColorY;
            uniform float4 _BackColorY;
            uniform float _XorY;
            float2 Alpha_Pattern_Test( float3 ThisColor , float3 TopColor , float3 LeftColor , float ThisAlpha , float TopAlpha , float LeftAlpha , float BotAlpha , float3 BotColor , float2 px , float DisableHQ , float BotLeftAlpha , float TopLeftAlpha , float3 BotLeftColor , float3 TopLeftColor ){
            // This function will save four colors into global variables,
            // which we will use (later) to lerp between them and create
            // a perfectly blended and transparent effect:
            
            float checkerdBoxTest = (fmod(px.x + px.y, 2) == DisableHQ);
            //float billboardTest = (fmod(px.x + px.y, 2) == 0);
            
            //These 2 lines help prevent us from seeing billboards through the HQ trees:
            float TreeX = checkerdBoxTest; //<-- gives preference for the HQ's checkerdBox pixel to be the "tree".
            float TreeY = checkerdBoxTest; //<-- gives preference for the HQ's checkerdBox pixel to be the "tree".
            
            //Alpha values of 1 are ALWAYS non-tree pixels, so in this case we override the above checkerdBox pattern:
            //This helps prevent the billboards from leaving checkerdbox patterns around the edge of the HQ tree:
            TreeX = ThisAlpha == 1 ? 1 : LeftAlpha == 1 ? 0 : TreeX;
            TreeY = ThisAlpha == 1 ? 1 : TopAlpha == 1 ? 0 : TreeY;
            
            //ONLY the "far" billboards output an alpha value of exactly 0 [Edit: this was removed]. So if the alpha is 0, then give preference to the far billboard.
            //This ensures that point-blank billboards that are transparent do not over draw the distant billboards.
            //TreeX = ThisAlpha == 0 ? 1 : LeftAlpha == 0 ? 0 : TreeX;
            //TreeY = ThisAlpha == 0 ? 1 : TopAlpha == 0 ? 0 : TreeY;
            
            //TreeX = ThisAlpha == 0 && LeftAlpha == 0 ? billboardTest : TreeX;
            //TreeY = ThisAlpha == 0 && TopAlpha == 0 ? billboardTest : TreeY;
            
            _TreeColorY = (TreeY == 0) ? float4(ThisColor, ThisAlpha) : float4(TopColor, TopAlpha);
            _BackColorY = (TreeY == 0) ? float4(TopColor, TopAlpha) : float4(ThisColor, ThisAlpha);
            
            _TreeColorX = (TreeX == 0) ? float4(ThisColor, ThisAlpha) : float4(LeftColor, LeftAlpha);
            _BackColorX = (TreeX == 0) ? float4(LeftColor, LeftAlpha) : float4(ThisColor, ThisAlpha);
            
            TreeX = _TreeColorX.a;
            TreeY = _TreeColorY.a;
            
            //The XorY variable determines if we blend pixels together along the X or the Y direction. We always blend exclusively in only one of
            //those two directions. If XorY == 0, then we blend along X, which creates perfectly smooth horizontally but will leave jaggedy looking
            //edges on ANY vertical edge (such as tree trunks). If XorY == 1, then we blend along Y, which creates perfectly smooth vertical edges
            //but all horizontal edges will be jaggedy looking. By default, we smoothen along X (so horizontal will be smooth by default). 
            //The following lines will check if we are working with a vertical line, and in such a case, it switches to blend along Y instead.
            
            //The next two lines will solve 99% of all jaggedy vertical edges. These lines examine two sets of 3 vertical pixels in a row.
            //The first 3-pixel-in-a-row is the three pixels at the subject pixel. This would be the subject pixel itself, and the pixels above and
            //below it. The other 3-pixels-in-a-row is the three vertical pixels immediately to the left of the subject pixel. What we're looking for
            //is for one of these three-pixels-in-a-row to be solid background pixels, but the other to NOT be. If this is true, then we know we've
            //found a vertical edge. In this case, we switch to blend vertically by changing XorY to equal 1.
            
            float This3Alpha = ThisAlpha + TopAlpha + BotAlpha;
            float Left3Alpha = LeftAlpha + TopLeftAlpha + BotLeftAlpha;
            
            //The next two lines have been commented out, and replaced by two simplier lines below.
            //_XorY = ((ThisAlpha == TopAlpha && ThisAlpha == BotAlpha) && (LeftAlpha != TopLeftAlpha && LeftAlpha != BotLeftAlpha)) ? 1 : _XorY; //<-- right side vertical edge.
            //_XorY = ((ThisAlpha != TopAlpha && ThisAlpha != BotAlpha) && (LeftAlpha == TopLeftAlpha && LeftAlpha == BotLeftAlpha)) ? 1 : _XorY; //<-- left side vertical edge.
            
            _XorY = ((This3Alpha == 3) && (Left3Alpha != 3)) ? 1 : _XorY; //<-- right side vertical edge.
            _XorY = ((ThisAlpha != TopAlpha && ThisAlpha != BotAlpha) && (Left3Alpha == 3)) ? 1 : _XorY; //<-- left side vertical edge.
            
            //The above two lines fixes only the jagged edges that appear on the edges of the trees (where the edge of the tree meets the sky or
            //terrain in the background). But in places where there is no sky, but rather there are solid tree pixels, jagged areas can still appear in
            //places where things like dark tree trunks are in front of leaves. To fix this, we can't look for a difference in the alpha values, since
            //ALL the pixels are tree pixels. Instead, we'll need to look at the brightness of the pixels to determine what to do.
            
            float TopBrite = (TopColor.r + TopColor.g + TopColor.b);
            float ThisBrite = (ThisColor.r + ThisColor.g + ThisColor.b);
            float BotBrite = (BotColor.r + BotColor.g + BotColor.b);
            
            float TopLeftBrite = (TopLeftColor.r + TopLeftColor.g + TopLeftColor.b);
            float LeftBrite = (LeftColor.r + LeftColor.g + LeftColor.b);
            float BotLeftBrite = (BotLeftColor.r + BotLeftColor.g + BotLeftColor.b);
            
            float LeftVertical3PixelsBright = (TopLeftBrite + LeftBrite + BotLeftBrite);
            float ThisVertical3PixelsBright = (TopBrite + ThisBrite + BotBrite);
            
            //The next line determines if all the pixels in the area are tree pixels. Note, that background pixels are allowed to be present,
            //in the checkerdbox pattern. So we have to check it two possible ways, to accomidate for possible background pixels in possible
            //checkerdbox patterns:
            float AllAreTreePixels = 	((ThisAlpha < 0.991 && TopLeftAlpha < 0.991 && BotLeftAlpha < 0.991) ||
            		(TopAlpha < 0.991 && BotAlpha < 0.991 && LeftAlpha < 0.991));
            
            //And finally, we check the brightness of the vertical 3-pixels-in-a-row to the left, vs the brightness of the vertical 3-pixels-in-a-row
            //at the subject location, to see if there is at least a 0.5 difference. If there is, then most likely we ought to blend along the vertical
            //axis instead.
            _XorY = (AllAreTreePixels == 1 && (LeftVertical3PixelsBright > ThisVertical3PixelsBright + 0.5)) ? 1 : _XorY;
            _XorY = (AllAreTreePixels == 1 && (ThisVertical3PixelsBright > LeftVertical3PixelsBright + 0.5)) ? 1 : _XorY;
            
            //The next tree lines help to create a soft 1-pixel edge where the tree pixels meet the background pixels.
            //It accomplishes this by limiting the edge pixels to a maximum alpha value of 0.5. NOTE: It fails to soften all
            //the pixels along the right edge, but it fully softens the top, bottom and left edges.
            float maxAlpha = lerp(0.5, 1, AllAreTreePixels);
            TreeX = min(maxAlpha, TreeX);
            TreeY = min(maxAlpha, TreeY);
            
            return float2(TreeX, TreeY); //<-- retuns the alpha of each tree pixel.
            
            }
            
            uniform float _LushLODTreeDisableHQ;
            float3 If_Node( float A , float3 C , float3 XY ){
            return A < 0.991 ? XY : C;
            }
            
            float2 GimmeScreenSpaceUV_MAINPASS( float2 screenPos ){
            #if UNITY_UV_STARTS_AT_TOP
            return float2(screenPos.x, 1-screenPos.y);
            #else
            return float2(screenPos.x, screenPos.y);
            #endif
            }
            
            struct VertexInput {
                float4 vertex : POSITION;
            };
            struct VertexOutput {
                float4 pos : SV_POSITION;
                float4 projPos : TEXCOORD0;
            };
            VertexOutput vert (VertexInput v) {
                VertexOutput o = (VertexOutput)0;
                o.pos = mul(UNITY_MATRIX_VP, v.vertex );
                o.projPos = ComputeScreenPos (o.pos);
                COMPUTE_EYEDEPTH(o.projPos.z);
                return o;
            }
            float4 frag(VertexOutput i, float facing : VFACE) : COLOR {
                float isFrontFace = ( facing >= 0 ? 1 : 0 );
                float faceSign = ( facing >= 0 ? 1 : -1 );
                float2 sceneUVs = (i.projPos.xy / i.projPos.w);
////// Lighting:
////// Emissive:
                float2 node_1991 = GimmeScreenSpaceUV_MAINPASS( sceneUVs.rg );
                float4 ThisPix = tex2D(_MainTex,TRANSFORM_TEX(node_1991, _MainTex)); // Subject pixel. Modified alpha.
                float2 node_7562 = float2(_ScreenParams.r,_ScreenParams.g);
                float2 node_9556 = (node_7562*10000.0); // Multiply the screen pixels by 10000 to make our math 10k times more precise. This hopefully fixes issues with the rounding that was causing pixels to be skipped which caused lines through the trees.
                float2 node_7967 = round((node_1991*node_9556)).rg;
                float PixelLoc_X = node_7967.r;
                float PixelLoc_Y = node_7967.g;
                float2 ScreenSizePix = node_9556;
                float2 node_1894 = (float2(PixelLoc_X,(PixelLoc_Y-10000.0))/ScreenSizePix); // Remaps pixel distance back to ScreenUV with range from 0 to 1.
                float4 TopPix = tex2D(_MainTex,TRANSFORM_TEX(node_1894, _MainTex)); // Top pixel. Modified alpha.
                float2 node_2624 = (float2((PixelLoc_X-10000.0),PixelLoc_Y)/ScreenSizePix); // Remaps pixel distance back to ScreenUV with range from 0 to 1.
                float4 LeftPix = tex2D(_MainTex,TRANSFORM_TEX(node_2624, _MainTex)); // Left pixel. Modified alpha.
                float2 node_6567 = (float2(PixelLoc_X,(PixelLoc_Y+10000.0))/ScreenSizePix); // Remaps pixel distance back to ScreenUV with range from 0 to 1.
                float4 BottomPix = tex2D(_MainTex,TRANSFORM_TEX(node_6567, _MainTex)); // Bottom pixel. Modified alpha.
                float node_4578 = node_2624.r;
                float2 node_528 = float2(node_4578,node_6567.g);
                float4 BotLeftPix = tex2D(_MainTex,TRANSFORM_TEX(node_528, _MainTex)); // BotLeft pixel. Modified alpha.
                float2 node_3304 = float2(node_4578,node_1894.g);
                float4 TopLeftPix = tex2D(_MainTex,TRANSFORM_TEX(node_3304, _MainTex)); // TopLeft pixel. Modified alpha.
                float2 node_4727 = Alpha_Pattern_Test( ThisPix.rgb , TopPix.rgb , LeftPix.rgb , ThisPix.a , TopPix.a , LeftPix.a , BottomPix.a , BottomPix.rgb , floor((node_1991*node_7562)) , lerp((1.0 - _LushLODTreeDisableHQ),_LushLODTreeDisableHQ,fmod(_ScreenParams.g,2.0)) , BotLeftPix.a , TopLeftPix.a , BotLeftPix.rgb , TopLeftPix.rgb ).rg;
                float LowestAlpha = min(node_4727.r,node_4727.g);
                float3 ThisPixColor = ThisPix.rgb;
                float TreeAlphaX = saturate((node_4727.r*1.06383+-0.0106383));
                float TreeAlphaY = saturate((node_4727.g*1.06383+-0.0106383));
                float3 node_1269 = If_Node( LowestAlpha , ThisPixColor , lerp(lerp(_BackColorX.rgb,_TreeColorX.rgb,TreeAlphaX),lerp(_BackColorY.rgb,_TreeColorY.rgb,TreeAlphaY),_XorY) ); // Draw original color if all three pixels are opaque. Non tree pixels are fully opaque.
                float3 emissive = min(float3(0,0,0),node_1269);
                float3 finalColor = emissive + node_1269;
                return fixed4(finalColor,1);
            }
            ENDCG
        }
    }
    CustomEditor "ShaderForgeMaterialInspector"
}
